/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/66eaf590abb0ff37265c6297.glb 
*/

import React, {useEffect, useRef} from 'react'
import { useGraph, useFrame } from '@react-three/fiber'
import { useControls } from 'leva'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import * as THREE from 'three';
import { SkeletonUtils } from 'three-stdlib'

export function Avatar(props) {
  const {animation} = props;
  const{headFollow, cursorFollow , wireframe} = useControls({
    headFollow: false,
    cursorFollow: false,
    wireframe: false,
  });
  const group = useRef();
  const { scene } = useGLTF('models/66eaf590abb0ff37265c6297.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)

  const {animations: typingAnimation } = useFBX("animations/Typing.fbx");
  const {animations: idleAnimation } = useFBX("animations/Falling.fbx");
  const {animations: standAnimation } = useFBX("animations/Standing Greeting.fbx");

  typingAnimation[0].name = "Typing";
  idleAnimation[0].name = "Falling";
  standAnimation[0].name = "Stand";

  const {actions} = useAnimations([typingAnimation[0], idleAnimation[0], standAnimation[0]], group);
  useFrame((state) => {
    if(headFollow){
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
    if(cursorFollow){
    const target = new THREE.Vector3(state.pointer.x, state.pointer.y, 1);
    group.current.getObjectByName("Spine2").lookAt(target);
    }
  });
  useEffect(() => {
    if (actions && actions[animation]) {
      actions[animation].reset().play();
    }
  
    return () => {
      if (actions && actions[animation]) {
        actions[animation].reset().stop();
      }
    };
  }, [animation, actions]);
  
  
  useEffect(() => {
   
    
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe;
    });
  }, [wireframe])
  ;
 
  
  return (
    <group {...props} ref={group} dispose={null}>
    <group rotation-x={-Math.PI / 2} >
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
    </group>
  );
}

useGLTF.preload('models/66eaf590abb0ff37265c6297.glb');


